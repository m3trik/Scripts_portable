{
proc string filterComponentNumber (string $selection)
  {
  string $componentName = `substitute "[A-Z]*_[A-Z]* *[0-9]*: " ($selection) ""`;
  return $componentName;
  }

proc string filterNamespace (string $selection)
  {
  string $namespace = `substitute "[[0-9]*]" ($selection) ""`;
  return $namespace;
  }

proc string [] filterNormalString (string $normal)
  {
  string $userSelectionNormal = `substitute "[A-Z]*_[A-Z]* *[0-9]*: " ($normal) ""`;

  string $buffer[];
  tokenize $userSelectionNormal " " $buffer;
  return $buffer;
  }

proc string [] getNormal (string $face)
  {
  string $normalDir[] = `polyInfo -faceNormals $face`;
  return $normalDir;
  }

proc string [] getAllNormal (string $namespace)
  {
  int $numFaces[] = `polyEvaluate -face`;//returns number of faces as an integer
  string $getNormal[];

  for ($componentNum=0; $componentNum < $numFaces[0]; $componentNum++) //for (number of faces):
    {
    string $array[] = `polyInfo -faceNormals ($namespace+"["+$componentNum+"]")`;//get normal info from the rest of the object's faces
    $string = stringArrayToString ($array, " ");
    $getNormal[size($getNormal)] = $string;
    }
  return $getNormal;
  }

proc string [] getContiguousFace (string $userSelection[])
  {
  for ($face in $userSelection)
	  {
	  // print $face;
	  string $adjEdges[] = `polyListComponentConversion -fromFace -toEdge $userSelection`;
	  string $adjFaces[] = `polyListComponentConversion -fromEdge -toFace $adjEdges`;
	  return $adjFaces;
		}
  }

proc string [] userSelection ()
  {
  string $selection[] = `ls -selection`;//  List objects that are currently selected.
  $selection = `filterExpand -selectionMask 34 -expand true $selection`;//	essentially, do not combine component names within the array.
  return $selection;
  }

proc string [] userSelectionNormal ()
  {
  string $normal[] = `polyInfo -faceNormals`;//returns the face normals of selected faces

  $userSelectionNormal = filterNormalString($normal[0]);//normal dir of selected face
  return $userSelectionNormal;
  }

proc string [] getSimilarNormal (string $namespace, float $rangeX, float $rangeY, float $rangeZ)
  {
  $userSelectionNormal = userSelectionNormal();
  float $sX = $userSelectionNormal[0];
  float $sY = $userSelectionNormal[1]; 
  float $sZ = $userSelectionNormal[2];

  int $numFaces[] = `polyEvaluate -face`;

  string $similarNormal[];
  $componentNum=0;

  for ($num=0; $num < $numFaces[0]; $num++)
    {
    $componentName = ($namespace+"["+$componentNum+"]");//assemble component name
    // print ("$componentName-> "+$componentName+"\n");
    $normalDir = getNormal($componentName);
    $filterNormalString = filterNormalString($normalDir[0]);

    float $nX = $filterNormalString[0];
    float $nY = $filterNormalString[1]; 
    float $nZ = $filterNormalString[2];
    // print ($sX +" ");
    // print ($sY +" ");
    // print ($sZ +"\n");
    // print ($nX +" ");
    // print ($nX +" ");
    // print ($nX +"\n");

    if ($sX <= $nX + $rangeX && $sX >= $nX - $rangeX
      && $sY <= $nY + $rangeY && $sY >= $nY - $rangeY 
      && $sZ <= $nZ + $rangeZ && $sZ >= $nZ - $rangeZ)
      {
      $similarNormal[size($similarNormal)] = $componentName;
      }
    $componentNum++;
    }
  // print $similarNormal;
  return $similarNormal;
  }

proc mainProgressBar (string $gMainProgressBar, int $numFaces, int $count)
  {
  string $num = $numFaces;
  string $status = "iterating through "+$num+" faces";

  progressBar -edit
              -beginProgress
              -isInterruptable true
              -status $status
              -maxValue $count
              $gMainProgressBar;
  }

proc makeSelection (string $getSimilarNormal[])
  {
  global string $gMainProgressBar;

  string $finalSelection[];

  int $numFaces = `size($getSimilarNormal)`;
  $count = ($numFaces/($numFaces*.02));

  mainProgressBar ($gMainProgressBar, $numFaces, $count);

  
	for ($num=0; $num < $count; $num++)
	  {
    if(`progressBar -query -isCancelled $gMainProgressBar`)
      {
      break;
      }
    progressBar -edit
      -step 1 $gMainProgressBar;

	  $userSelection = userSelection();
	  // print "userSelection: ";print $userSelection;
	  $adjFaces = getContiguousFace ($userSelection);
	  $adjFaces = `filterExpand -selectionMask 34 -expand true $adjFaces`;//list each component in a separate string
	  
	  for ($face in $adjFaces)
			{
			if (stringArrayContains($face, $getSimilarNormal))
				{
				// print "adjFaces:\n";print $adjFaces;
				// print "face:\n";print ($face+"\n");
				if (!stringArrayContains($face, $finalSelection))
					{
					$finalSelection[size($finalSelection)] = $face;
					$size = size($finalSelection);
					
					select -add $finalSelection[$size-1];//last item added to array which is equivalent to: select -add $face;
					}
				}
			}
		clear ($adjFaces);
	  }
	select -replace $finalSelection;

  progressBar -edit
    -endProgress
    $gMainProgressBar;
	}

global proc tk_selectPolyFaceIsland (float $rangeX, float $rangeY, float $rangeZ)
  {
  undoInfo -openChunk;

  $userSelection = userSelection();

  $namespace = filterNamespace($userSelection[0]);

  $getSimilarNormal = getSimilarNormal($namespace, $rangeX, $rangeY, $rangeZ);

  makeSelection($getSimilarNormal);

  undoInfo -closeChunk;
  
  }

// float $rangeX = 2.0;
// float $rangeY = 0.5;
// float $rangeZ = 2.0;
// rehash (tk_selectPolyFaceIsland($rangeX, $rangeY, $rangeZ));

}