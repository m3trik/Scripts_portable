// Description: 
//   Dockable script editor output window
//   RMB context menu


global proc scriptEditorOutput()
    {

    formLayout -numberOfDivisions 100 -width 50 mainLayout;
        global string $cmdScrollFieldReporter;
        //create script editor output
        $cmdScrollFieldReporter = `cmdScrollFieldReporter //-height 35
                                                            //-backgroundColor 0 0 0
                                                            //-highlightColor 0 0 0
                                                            -echoAllCommands off
                                                            -filterSourceType ""
                                                            `;
        // print $cmdScrollFieldReporter;
        
        // create RMB context menu
        // end multi-line strings in continuation character '\' or maya will throw an unterminated string error
        $contextMenu = `popupMenu -parent $cmdScrollFieldReporter`;

        menuItem -label "Clear Output" 
                 -command ("cmdScrollFieldReporter -edit -clear "+$cmdScrollFieldReporter);

        menuItem -divider true;

        //menu -label "Options";
        menuItem -subMenu true -label "Options";

            menuItem -label "Echo All Commands"//Global parameter, affects all command reporters
                    -checkBox off
                    -command ("\
                        if (`commandEcho -query -state`==off)\
                            {\
                            commandEcho -state on;\
                            print (\"** Echo Commands On **\");\
                        }else{\
                            commandEcho -state off;\
                            print (\"** Echo Commands Off **\");\
                            }\
                        ")
                    "echoAllCommands";
            $checkBoxState = `menuItem -query -checkBox echoAllCommands`;
            menuItem -edit -checkBox $checkBoxState echoAllCommands;
     
            menuItem -label "Info"
                    -checkBox on
                    -command ("\
                        $state = `cmdScrollFieldReporter -query -suppressInfo "+$cmdScrollFieldReporter+"`;\
                        cmdScrollFieldReporter -edit -suppressInfo (!$state) "+$cmdScrollFieldReporter+";\
                        if ($state == 0)\
                            {\
                            print (\"** Info Messages Off **\");\
                        }else{\
                            print (\"** Info Messages On **\");\
                            }\
                        ")
                    "suppressInfo";
            $checkBoxState = `menuItem -query -checkBox suppressInfo`;
            menuItem -edit -checkBox $checkBoxState suppressInfo;

            menuItem -label "Warning Messages"
                    -checkBox on
                    -command ("\
                        $state = `cmdScrollFieldReporter -query -suppressWarnings "+$cmdScrollFieldReporter+"`;\
                        cmdScrollFieldReporter -edit -suppressWarnings (!$state) "+$cmdScrollFieldReporter+";\
                        if ($state == 0)\
                            {\
                            print (\"** Warning Messages Off **\");\
                        }else{\
                            print (\"** Warning Messages On **\");\
                            }\
                        ")
                    "suppressWarnings";
            $checkBoxState = `menuItem -query -checkBox suppressWarnings`;
            menuItem -edit -checkBox $checkBoxState suppressWarnings;

            menuItem -label "Error Messages"
                    -checkBox on
                    -command ("\
                        $state = `cmdScrollFieldReporter -query -suppressErrors "+$cmdScrollFieldReporter+"`;\
                        cmdScrollFieldReporter -edit -suppressErrors (!$state) "+$cmdScrollFieldReporter+";\
                        if ($state == 0)\
                            {\
                            print (\"** Error Messages Off **\");\
                        }else{\
                            print (\"** Error Messages On **\");\
                            }\
                        ")
                    "suppressErrors";
            $checkBoxState = `menuItem -query -checkBox suppressErrors`;
            menuItem -edit -checkBox $checkBoxState suppressErrors;

            menuItem -label "Stack Trace"//Global parameter, affects all command reporters
                    -checkBox on
                    -command ("\
                        $state = `stackTrace -query -state`;\
                        stackTrace -state (!$state);\
                        if ($state == 0)\
                            {\
                            print (\"** Stack Trace Off **\");\
                        }else{\
                            print (\"** Stack Trace On **\");\
                            }\
                        ")
                    "showStackTrace";
            $checkBoxState = `menuItem -query -checkBox showStackTrace`;
            menuItem -edit -checkBox $checkBoxState showStackTrace;

            setParent -menu ..;

        menuItem -divider true;

        menuItem -label "Source Script"
                 -command ("\
                    string $filter = \"Script Files (*.mel *.py)\";\
                    string $result[] = `fileDialog2 -caption \"Source Script\" -fileFilter $filter -fileMode 1 -dialogStyle 2`;\
                    string $quote = \"\\\"\";\
                    string $sourceFile = \"source\" + ( $quote + $result[0] + $quote );\
                    eval $sourceFile;\
                    ");

        menuItem -label "Copy"//copy selected text to clipboard -saveSelection -saveSelectionToShelf
                 -command ("cmdScrollFieldReporter -edit -copySelection "+$cmdScrollFieldReporter);

        // menuItem -label "Save"//save selected text to file  
        //          -command ("cmdScrollFieldReporter -edit -saveSelection $cmdScrollFieldReporter");

        menuItem -label "Save to Shelf"//save selected text to shelf
                 -command ("cmdScrollFieldReporter -edit -saveSelectionToShelf "+$cmdScrollFieldReporter);

        menuItem -label "Search Web"//copy selected text to clipboard and preform a web search
                 -command ("\
                    string $text = `cmdScrollFieldReporter -edit -copySelection "+$cmdScrollFieldReporter+"`\
                    print $text\
                    ");

    formLayout -edit 
        -attachForm $cmdScrollFieldReporter "top"     0
        -attachForm $cmdScrollFieldReporter "bottom"  0
        -attachForm $cmdScrollFieldReporter "left"    0
        -attachForm $cmdScrollFieldReporter "right"   0 
        mainLayout;
    }



global proc initScriptEditorOutputWin()
    {

    string $workspaceName  = "scriptEditorOutputWorkspace";
    string $uiScript       = "scriptEditorOutput()";

    if (`workspaceControl -exists $workspaceName`)
        deleteUI $workspaceName;

    workspaceControl -label "Output"
                    -initialWidth 666
                    -initialHeight 111
                    -heightProperty "preferred" //Can be resized manually but will not be given any extra space while maximizing/dynamic resizing
                    // -dockToMainWindow "top" true
                    -tabPosition "east" true
                    // -retain false
                    // -collapse true
                    -uiScript $uiScript
                    $workspaceName
                    ;
    }


// python version of initScriptEditorOutputWin:
// uiScript       = "$scriptEditorOutput()"
// workspaceName  = "scriptEditorOutputWorkspace"

// if pm.workspaceControl (workspaceName, exists=1):
//     pm.deleteUI (workspaceName)

// pm.workspaceControl (workspaceName,
//                     label="Output",
//                     initialWidth=666,
//                     initialHeight=222,
//                     heightProperty="preferred", #Can be resized manually but will not be given any extra space while maximizing/dynamic resizing
//                     # dockToMainWindow=["top",True],
//                     tabPosition=["east",True],
//                     # retain=False,
//                     collapse=True,
//                     uiScript=uiScript
//                     )




// scriptEditorOutput();
// initScriptEditorOutputWin();



// Features to add:
//  external editor: save file/clear editor output window and send to maya


// Script Editor output:
//     commandEcho -filter string[] textfield eg. commandEcho -filter {"changeToolIcon", "escapeCurrentTool", "autoUpdateAttrEd"}; -This flag allows you to filter out unwanted commands when echo all commands is enabled. You can provide a partial command name, so all commands that start with a substring specified in filter entry will be filtered out. If filter is empty, all commands are echoed to the command window.
//     cmdScrollFieldReporter -dragCallback MMB clear field

// RMB context menu:
//     radio buttons query current state
