//add checkbox to attempt to run code in the script text field an all selected.
//then add if check to the run 'mel' and run 'python' command buttons
{

proc string [] createArrayFromSelection ()	//returns a string array of the selected transform nodes
	{
	string $selection[];
	select -hierarchy;
	string $nodes [] = `ls -selection -transforms`;
	string $groupedNodes [] = `listRelatives -type "transform"`;	//if the nodes are grouped then just get the children

	if ($groupedNodes[0] != "")	//check to see if the nodes are grouped
		{
		int $size = `size($groupedNodes)`;
		clear ($nodes);
		appendStringArray($nodes, $groupedNodes, $size);
		}

	clear $selection; 
	for ($node in $nodes)
		{
		$selection[size($selection)] = $node;	//print $node;
		}
	return $selection;
	}


proc setTo (string $commandType)
	{
	if ($commandType == "mel")
		{
		checkBox -edit -value 1 mel_checkBox;
		checkBox -edit -value 0 python_checkBox;
		checkBox -edit -value 0 pymel_checkBox;
		checkBox -edit -value 0 convert_checkBox;
		checkBox -edit -value 0 help_checkBox;
		checkBox -edit -value 0 keyword_checkBox;
		checkBox -edit -value 0 query_checkBox;
		checkBox -edit -value 0 searchMEL_checkBox;
		checkBox -edit -value 0 searchPython_checkBox;
		checkBox -edit -value 0 searchPymel_checkBox;
		}

	if ($commandType == "python")
		{
		checkBox -edit -value 0 mel_checkBox;
		checkBox -edit -value 1 python_checkBox;
		checkBox -edit -value 0 pymel_checkBox;
		checkBox -edit -value 0 convert_checkBox;
		checkBox -edit -value 0 help_checkBox;
		checkBox -edit -value 0 keyword_checkBox;
		checkBox -edit -value 0 query_checkBox;
		checkBox -edit -value 0 searchMEL_checkBox;
		checkBox -edit -value 0 searchPython_checkBox;
		checkBox -edit -value 0 searchPymel_checkBox;
		}

	if ($commandType == "pymel")
		{
		checkBox -edit -value 0 mel_checkBox;
		checkBox -edit -value 0 python_checkBox;
		checkBox -edit -value 1 pymel_checkBox;
		checkBox -edit -value 0 convert_checkBox;
		checkBox -edit -value 0 help_checkBox;
		checkBox -edit -value 0 keyword_checkBox;
		checkBox -edit -value 0 query_checkBox;
		checkBox -edit -value 0 searchMEL_checkBox;
		checkBox -edit -value 0 searchPython_checkBox;
		checkBox -edit -value 0 searchPymel_checkBox;
		}

	if ($commandType == "batch")
		{
		int $state = `checkBox -query -value batch_checkBox`;
		if ($state)
			{
			checkBox -edit -value 1 batch_checkBox;
			checkBox -edit -value 0 convert_checkBox;
			checkBox -edit -value 0 help_checkBox;
			checkBox -edit -value 0 keyword_checkBox;
			checkBox -edit -value 0 query_checkBox;
			checkBox -edit -value 0 searchMEL_checkBox;
			checkBox -edit -value 0 searchPython_checkBox;
			checkBox -edit -value 0 searchPymel_checkBox;
			}
		else
			{
			checkBox -edit -value 0 batch_checkBox;
			}
		}

	if ($commandType == "convert")
		{
		checkBox -edit -value 0 mel_checkBox;
		checkBox -edit -value 0 python_checkBox;
		checkBox -edit -value 0 pymel_checkBox;
		checkBox -edit -value 1 convert_checkBox;
		checkBox -edit -value 0 batch_checkBox;
		checkBox -edit -value 0 help_checkBox;
		checkBox -edit -value 0 keyword_checkBox;
		checkBox -edit -value 0 query_checkBox;
		checkBox -edit -value 0 searchMEL_checkBox;
		checkBox -edit -value 0 searchPython_checkBox;
		checkBox -edit -value 0 searchPymel_checkBox;
		}

	if ($commandType == "help")
		{
		checkBox -edit -value 0 mel_checkBox;
		checkBox -edit -value 0 python_checkBox;
		checkBox -edit -value 0 pymel_checkBox;
		checkBox -edit -value 0 convert_checkBox;
		checkBox -edit -value 0 batch_checkBox;
		checkBox -edit -value 1 help_checkBox;
		checkBox -edit -value 0 keyword_checkBox;
		checkBox -edit -value 0 query_checkBox;
		checkBox -edit -value 0 searchMEL_checkBox;
		checkBox -edit -value 0 searchPython_checkBox;
		checkBox -edit -value 0 searchPymel_checkBox;
		}

	if ($commandType == "keyword")
		{
		checkBox -edit -value 0 mel_checkBox;
		checkBox -edit -value 0 python_checkBox;
		checkBox -edit -value 0 pymel_checkBox;
		checkBox -edit -value 0 convert_checkBox;
		checkBox -edit -value 0 batch_checkBox;
		checkBox -edit -value 0 help_checkBox;
		checkBox -edit -value 1 keyword_checkBox;
		checkBox -edit -value 0 query_checkBox;
		checkBox -edit -value 0 searchMEL_checkBox;
		checkBox -edit -value 0 searchPython_checkBox;
		checkBox -edit -value 0 searchPymel_checkBox;
		}

	if ($commandType == "query")
		{
		checkBox -edit -value 0 mel_checkBox;
		checkBox -edit -value 0 python_checkBox;
		checkBox -edit -value 0 pymel_checkBox;
		checkBox -edit -value 0 convert_checkBox;
		checkBox -edit -value 0 batch_checkBox;
		checkBox -edit -value 0 help_checkBox;
		checkBox -edit -value 0 keyword_checkBox;
		checkBox -edit -value 1 query_checkBox;
		checkBox -edit -value 0 searchMEL_checkBox;
		checkBox -edit -value 0 searchPython_checkBox;
		checkBox -edit -value 0 searchPymel_checkBox;
		}

	if ($commandType == "searchMEL")
		{
		checkBox -edit -value 0 mel_checkBox;
		checkBox -edit -value 0 python_checkBox;
		checkBox -edit -value 0 pymel_checkBox;
		checkBox -edit -value 0 convert_checkBox;
		checkBox -edit -value 0 batch_checkBox;
		checkBox -edit -value 0 help_checkBox;
		checkBox -edit -value 0 keyword_checkBox;
		checkBox -edit -value 0 query_checkBox;
		checkBox -edit -value 1 searchMEL_checkBox;
		checkBox -edit -value 0 searchPython_checkBox;
		checkBox -edit -value 0 searchPymel_checkBox;
		}

	if ($commandType == "searchPython")
		{
		checkBox -edit -value 0 mel_checkBox;
		checkBox -edit -value 0 python_checkBox;
		checkBox -edit -value 0 pymel_checkBox;
		checkBox -edit -value 0 convert_checkBox;
		checkBox -edit -value 0 batch_checkBox;
		checkBox -edit -value 0 help_checkBox;
		checkBox -edit -value 0 keyword_checkBox;
		checkBox -edit -value 0 query_checkBox;
		checkBox -edit -value 0 searchMEL_checkBox;
		checkBox -edit -value 1 searchPython_checkBox;
		checkBox -edit -value 0 searchPymel_checkBox;
		}

	if ($commandType == "searchPymel")
		{
		checkBox -edit -value 0 mel_checkBox;
		checkBox -edit -value 0 python_checkBox;
		checkBox -edit -value 0 pymel_checkBox;
		checkBox -edit -value 0 convert_checkBox;
		checkBox -edit -value 0 batch_checkBox;
		checkBox -edit -value 0 help_checkBox;
		checkBox -edit -value 0 keyword_checkBox;
		checkBox -edit -value 0 query_checkBox;
		checkBox -edit -value 0 searchMEL_checkBox;
		checkBox -edit -value 0 searchPython_checkBox;
		checkBox -edit -value 1 searchPymel_checkBox;
		}
	}


proc run (string $command)
	{
	$mel_checkBox = `checkBox -query -value mel_checkBox`;
	$python_checkBox = `checkBox -query -value python_checkBox`;
	$pymel_checkBox = `checkBox -query -value pymel_checkBox`;
	$convert_checkBox = `checkBox -query -value convert_checkBox`;
	$batch_checkBox = `checkBox -query -value batch_checkBox`;
	$help_checkBox = `checkBox -query -value help_checkBox`;
	$keyword_checkBox = `checkBox -query -value keyword_checkBox`;
	$query_checkBox = `checkBox -query -value query_checkBox`;
	$searchMEL_checkBox = `checkBox -query -value searchMEL_checkBox`;
	$searchPython_checkBox = `checkBox -query -value searchPython_checkBox`;
	$searchPymel_checkBox = `checkBox -query -value searchPymel_checkBox`;

	if ($mel_checkBox)
		{
		if ($batch_checkBox)
			{
			$selection = createArrayFromSelection();
			for ($node in $selection)
				{
				select -replace $node;
				eval $command;
				}
			}
		else
			{
			eval $command;
			}
		}

	if ($python_checkBox)
		{
		// print ($command+"\n");
		$command = substituteAllString($command, "\"", "\\\"");
		$command = ("python ("+"\""+$command+"\")");
		// print ($command+"\n");

		if ($batch_checkBox)
			{
			$selection = createArrayFromSelection();
			for ($node in $selection)
				{
				select -replace $node;
				eval ($command);
				}
			}
		else
			{
			eval ($command);
			}
		}

	if ($pymel_checkBox)
		{
		$command = substituteAllString($command, "\"", "\\\"");
		string $pymelCommand = ("pm." + $command);
		$pymelCommand = ("python ("+"\""+$pymelCommand+"\")");

		if ($batch_checkBox)
			{
			$selection = createArrayFromSelection();
			for ($node in $selection)
				{
				select -replace $node;
				eval ($pymelCommand);
				}				
			}
		else
			{
			print $pymelCommand;
			eval ($pymelCommand);
			}	
		}

	if ($convert_checkBox) //fix EOL error. when command spans multiple lines.
		{
		$command = substituteAllString($command, "\"", "\\\"");
		//$command = python ("\" \".join("+$command+".splitlines())"); //convert to single line.
		// python ("convertMelToPy(\""+$command+";\")");
		python ("convertMelToPy('''"+$command+"''')"); //passes multiple lines but throws error on python side
		}

	if ($help_checkBox)
		{
		$command = substituteAllString($command, "\"", "\\\"");

		python ("commandHelp(\""+$command+"\")");
		}

	if ($keyword_checkBox)
		{
		$command = substituteAllString($command, "\"", "\\\"");
		
		python ("keywordSearch(\""+$command+"\")");
		}

	if ($query_checkBox)
		{
		$command = substituteAllString($command, "\"", "\\\"");
		
		python ("queryRuntime(\""+$command+"\")");
		}

	if ($searchMEL_checkBox)
		{
		$command = substituteAllString($command, "\"", "\\\"");
		
		python ("searchMEL(\""+$command+"\")");
		}

	if ($searchPython_checkBox)
		{
		$command = substituteAllString($command, "\"", "\\\"");
		
		python ("searchPython(\""+$command+"\")");
		}

	if ($searchPymel_checkBox)
		{
		$command = substituteAllString($command, "\"", "\\\"");
		
		python ("searchPymel(\""+$command+"\")");
		}
	}



global proc batchAttrRouter (string $i)
	{
	string $command = `textField -query -text commandtextField`;

	if ($i == "run command")
		{
	  run($command);
		}

	if ($i == "set to mel")
		{
	  setTo("mel");
		}

	if ($i == "set to python")
		{
	  setTo("python");
		}

	if ($i == "set to pymel")
		{
	  setTo("pymel");
		}

	if ($i == "batch")
		{
	  setTo("batch");
		}

	if ($i == "convert to pymel")
		{
	  setTo("convert");
		}

	if ($i == "help")
		{
		setTo("help");
		}

	if ($i == "keyword search")
		{
		setTo("keyword");
		}

	if ($i == "query runtime")
		{
		setTo("query");
		}

	if ($i == "search mel")
		{
		setTo("searchMEL");
		}

	if ($i == "search python")
		{
		setTo("searchPython");
		}

	if ($i == "search pymel")
		{
		setTo("searchPymel");
		}

	if ($i == "current context")
		{
		python ("currentCtx()");
		}

	if ($i == "source script")
		{
		python ("sourceScript()");
		}

	if ($i == "command reference")
		{
		python ("commandRef()");
		}

	if ($i == "global variables")
		{
		python ("globalVars()");
		}

	if ($i == "list ui")
		{
		python ("listUiObjects()");
		}

	if ($i == "command shell")
		{
		CommandShell;
		}
	}


global proc commandLineWindow()
	{
	python ("from maya_func import currentCtx,sourceScript,commandRef,globalVars,listUiObjects,convertMelToPy,commandHelp,keywordSearch,queryRuntime,searchMEL,searchPymel,searchPython");
	python ("import pymel.core as pm");
	python ("import maya.mel as mel");

	if (`window -query -exists commandLine_window`)
		{
		deleteUI commandLine_window;
		}

	window -title "commandLineWindow()" -toolbox true -sizeable true -resizeToFitChildren true -widthHeight 400 150 commandLine_window;
		formLayout -numberOfDivisions 100 scene_formLayout;
			frameLayout -label "Command Line" -labelAlign "top" -width 400 -collapsable false -collapse false f1;
				textField -annotation ""
									-alwaysInvokeEnterCommandOnReturn true
									-enterCommand "batchAttrRouter(\"run command\")"
									commandtextField;

				gridLayout -numberOfColumns 3 -cellWidthHeight 135 20 g1;
					button 		-label "Source Script"
										-command "batchAttrRouter(\"source script\")"
										-annotation "";

					button 		-label "CommandShell"
										-command "batchAttrRouter(\"command shell\")"
										-annotation "";

					button 		-label "Run"
										-command "batchAttrRouter(\"run command\")"
										-annotation "";
				setParent ..;
			setParent ..;

			frameLayout -label "Command Type"	-labelAlign "top" -width 400 -collapsable true -collapse false f2;
				gridLayout -numberOfColumns 2 -cellWidthHeight 200 20 g1;
					checkBox	-label "MEL"
										-value true
										-changeCommand "batchAttrRouter(\"set to mel\")"
										-annotation "run MEL script"
										mel_checkBox;

					checkBox	-label "search MEL Docs"
										-value false
										-changeCommand "batchAttrRouter(\"search mel\")"
										-annotation "search mel documentation"
										searchMEL_checkBox;

					checkBox	-label "Python"
										-value false
										-changeCommand "batchAttrRouter(\"set to python\")"
										-annotation "run Python script"
										python_checkBox;

					checkBox	-label "search Python Docs"
										-value false
										-changeCommand "batchAttrRouter(\"search python\")"
										-annotation "search python documentation"
										searchPython_checkBox;

					checkBox	-label "PyMEL"
										-value false
										-changeCommand "batchAttrRouter(\"set to pymel\")"
										-annotation "import pymel and automatically append 'pm.' to commands"
										pymel_checkBox;

					checkBox	-label "search PyMEL Docs"
										-value false
										-changeCommand "batchAttrRouter(\"search pymel\")"
										-annotation "search PyMEL documentation"
										searchPymel_checkBox;

					checkBox	-label "Batch"
										-value false
										-changeCommand "batchAttrRouter(\"batch\")"
										-annotation "attempt to run script on all selected items"
										batch_checkBox;

					checkBox	-label "Query Runtime Command"
										-value false
										-changeCommand "batchAttrRouter(\"query runtime\")"
										-annotation "enter a runtime command"
										query_checkBox;

					checkBox	-label "Help"
										-value false
										-changeCommand "batchAttrRouter(\"help\")"
										-annotation "print help for a command"
										help_checkBox;

					checkBox	-label "Convert to PyMEL"
										-value false
										-changeCommand "batchAttrRouter(\"convert to pymel\")"
										-annotation "convert MEL syntax to PyMEL"
										convert_checkBox;

					checkBox	-label "Keyword Search"
										-value false
										-changeCommand "batchAttrRouter(\"keyword search\")"
										-annotation "open a web browser and search keyword/s"
										keyword_checkBox;

					// checkBox	-label ""
					// 					-value false
					// 					-changeCommand "batchAttrRouter(\"\")"
					// 					-annotation ""
					// 					_checkBox;
					setParent ..;
				setParent..;

				frameLayout -label "Query"	-labelAlign "top" -width 400 -collapsable true -collapse true f3;
					gridLayout -numberOfColumns 3 -cellWidthHeight 135 20 g1;
						button 	-label "currentCtx"
										-command "batchAttrRouter(\"current context\")"
										-annotation "";

						button 	-label "command reference"
										-command "batchAttrRouter(\"command reference\")"
										-annotation "";

						button 	-label "list global variables"
										-command "batchAttrRouter(\"global variables\")"
										-annotation "";

						button 	-label "list Ui Objects"
										-command "batchAttrRouter(\"list ui\")"
										-annotation "";
						setParent ..;
					setParent..;

			formLayout -edit
			-attachControl 		f2 "top"	5	f1
			-attachControl 		f3 "top"	5	f2
			scene_formLayout;
			//when attaching new conrols dont forget to setParent
	
	showWindow commandLine_window;
	}

// commandLineWindow();
}